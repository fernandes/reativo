module <%= class_name %>::Operation
  class Index < Trailblazer::Operation
    <%- if options[:view_model] -%>
    ViewModel = Struct.new(<%= properties_symbols(include_id: true) %>) do
      # def cuid
      #   id
      # end
    end

    <%- end -%>
    step ->(options, params) { options["representer.render.class"] = <%= class_name %>::Representer::Index }
    step ->(options, params) { options["representer.errors.class"] = Reativo::Representer::Errors }
    step :scope!
    step :model!
    step :cache_key!

    def scope!(ctx, params:, current_user:, **)
      # Change the scope, so avoid data leaking
      ctx[:scope] = <%= model_name.singularize %>.where('created_at > ?', DateTime.current)
    end

    def model!(ctx, params:, current_user:, **)
      <%- if options[:view_model] -%>
      ctx[:model] = ctx[:scope].pluck(<%= properties_symbols(include_id: true) %>).map { |x| ViewModel.new(*x) }
      <%- else -%>
      ctx[:model] = ctx[:scope]
      <%- end -%>
    end
    
    def cache_key!(ctx, params:, current_user:, **)
      ctx[:cache_key] = ctx[:scope].cache_key
    end
  end
end
